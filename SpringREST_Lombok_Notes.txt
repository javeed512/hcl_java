
JSON:

JSON stands for JavaScript Object Notation

JSON is a lightweight format for storing and transporting data

JSON is often used when data is sent from a server to a web page

JSON is "self-describing" and easy to understand


JSON Syntax Rules
Data is in name/value pairs
Data is separated by commas
Curly braces hold objects
Square brackets hold arrays



product:{"pid":101,"pname":"mobile","price":5000}   --> single json object


Products:
[
{"pid":101,"pname":"mobile","price":5000} ,
{"pid":102,"pname":"mobile2","price":5000} ,
{"pid":103,"pname":"mobile3","price":5000}

]


-----------------------------------------


REST API:
===========

Representational State Transfer (REST) is an architectural style that defines a set of constraints to be used for creating web services. REST API is a way of accessing web services in a simple and flexible way without having any processing.

REST technology is generally preferred to the more robust Simple Object Access Protocol (SOAP) technology because REST uses less bandwidth, simple and flexible making it more suitable for internet usage. It’s used to fetch or give some information from a web service. All communication done via REST API uses only HTTP request. 

Working: A request is sent from client to server in the form of a web URL as HTTP GET or POST or PUT or DELETE request. After that, a response comes back from the server in the form of a resource which can be anything like HTML, XML, Image, or JSON. But now JSON is the most popular format being used in Web Services. 



GET = select / fetch

POST = add / insert

PUT =  update / modify

DELETE = remove / delete




GET: The HTTP GET method is used to read (or retrieve) a representation of a resource. In the safe path, GET returns a representation in XML or JSON and an HTTP response code of 200 (OK). In an error case, it most often returns a 404 (NOT FOUND) or 400 (BAD REQUEST). 
 
POST: The POST verb is most often utilized to create new resources. In particular, it’s used to create subordinate resources. That is, subordinate to some other (e.g. parent) resource. On successful creation, return HTTP status 201, returning a Location header with a link to the newly-created resource with the 201 HTTP status. 
NOTE: POST is neither safe nor idempotent. 

PUT: It is used for updating the capabilities. However, PUT can also be used to create a resource in the case where the resource ID is chosen by the client instead of by the server. In other words, if the PUT is to a URI that contains the value of a non-existent resource ID. On successful update, return 200 (or 204 if not returning any content in the body) from a PUT. If using PUT for create, return HTTP status 201 on successful creation. PUT is not safe operation but it’s idempotent. 

DELETE: It is used to delete a resource identified by a URI. On successful deletion, return HTTP status 200 (OK) along with a response body. 




Spring Rest API:
-----------------

@RestController  --> for rest controllers

@Restcontroller =  @Controller + @ResponseBody

Base url:
@RequestMapping


REST CRUD Operations:
----------------------
@GetMapping  

@PostMapping

@PutMapping

@DeleteMapping



@RequestBody
@PathVariable



Lombok:
========
One time setup for lombok in sts/eclipse

1. download lombok software  / plugin
2. add lombok plugin to the sts/eclipse
3. restart eclips/sts

Now,
add lombok jar file to get all annotations @Setter,@Getter .....

start using pojos






